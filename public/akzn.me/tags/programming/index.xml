<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Ayushman Khazanchi</title>
    <link>https://akzn.me/tags/programming/</link>
    <description>Recent content in programming on Ayushman Khazanchi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://akzn.me/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Send Pups Chatbot with Twilio and Whatsapp</title>
      <link>https://akzn.me/blog/send-pups-chatbot/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://akzn.me/blog/send-pups-chatbot/</guid>
      
        <description>&lt;p&gt;Sometime back I built a fun Whatsapp chatbot thing with which you could have some limited interaction. It&amp;rsquo;s not really a full-fledged chatbot to be clear. It&amp;rsquo;s basically a Flask API that sends you a Whatsapp photo of a cute pup along with a somewhat intellectual quote all using &lt;a href=&#34;https://www.twilio.com/&#34;&gt;Twilio&lt;/a&gt;&amp;rsquo;s Whatsapp API. I won&amp;rsquo;t go over setting up the &lt;a href=&#34;https://www.twilio.com/whatsapp&#34;&gt;Twilio Whatsapp Sandbox&lt;/a&gt;. There are plenty of guides for that around the web and it&amp;rsquo;s fairly basic.&lt;/p&gt;
&lt;p&gt;The python code runs on &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; as a backend API and is fairly simple. It has a &lt;code&gt;/pup&lt;/code&gt; endpoint where the requests come in and get parsed. The parsing is minimal â€” check if the user has requested what we have or deny it if the request is something we can&amp;rsquo;t fulfill (to make it &lt;em&gt;kind of&lt;/em&gt; act like a chatbot). You can see it in action at the end of the post or sign up yourself to try it.&lt;/p&gt;
&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;
&lt;p&gt;Start with installing the four main packages we&amp;rsquo;ll need&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir send-pups
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; send-pups
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; $ pip install flask requests twilio gunicorn
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The requirements file for my python virtualenv contains a bunch of dependencies that get installed automatically. The &lt;code&gt;gunicorn&lt;/code&gt; installation is purely for deployment to Heroku.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;certifi&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;2019.11.28
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chardet&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;3.0.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;click&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;7.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Flask&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;gunicorn&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;20.0.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;idna&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;2.9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;itsdangerous&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Jinja2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;2.11.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;MarkupSafe&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;PyJWT&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.7.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pytz&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;2019.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;2.23.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;six&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.14.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;twilio&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;6.37.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;urllib3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.25.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Werkzeug&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;twilio-whatsapp-sandbox&#34;&gt;Twilio Whatsapp Sandbox&lt;/h4&gt;
&lt;p&gt;The way this works is that Twilio corresponds with our Flask app using a webhook. In the Twilio console you can configure what you want your backend to be and for our purposes it points to my apps Heroku deployment endpoint (which ends in &lt;code&gt;/pup&lt;/code&gt; where the API is accessible). With the webhook configured in Twilio it now knows where to reach the send-pups app. Also in Twilio&amp;rsquo;s console in the Whatsapp Sandbox it gives you a specific number that you need to join. As a user/client you send a specific phrase to the Twilio number which connects your phone to Twilio. Since it&amp;rsquo;s a trial number it&amp;rsquo;s not open to everyone. Once your phone number is connected it can then send messages which end up in the Flask API through the webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-1024x350.png&#34; alt=&#34;Twilio console with webhook configured&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;flask-api&#34;&gt;Flask API&lt;/h4&gt;
&lt;p&gt;The Flask app is created in &lt;code&gt;send-pups/bot.py&lt;/code&gt; which does all the grunt work of parsing the request that comes in from the Twilio webhook, pulling the photo and quote together, and sending back the response to Twilio which then sends it to Whatsapp through its trial number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Flask, request
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; twilio.twiml.messaging_response &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; MessagingResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Flask(__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/pup&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;bot&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    incoming_msg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MessagingResponse()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    msg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;message()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responded &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;# check to see if request contains the phrase &amp;#34;send pup&amp;#34; anywhere&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;send pup&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; incoming_msg:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;https://api.quotable.io/random&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;status_code &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            quote &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;data[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;n- &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;data[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, as told to the pup&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            quote: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I could not retrieve a quote at this time&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        msg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;body(quote)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;https://api.thedogapi.com/v1/images/search&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;status_code &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        msg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;media(pup)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        responded &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;# If no &amp;#39;send pups&amp;#39; request, respond that it can only send pups atm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; responded:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        msg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;body(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Sorry, I only know about intellectual pups. Please say &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;send pup\\&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; if you&amp;#39;d like an intellectual pupper to appear&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt;(resp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s pretty much it. I was hoping to make it a little more interactive eventually by adding more granularity to it. You could ask for certain breeds, for example, but it won&amp;rsquo;t really change the functionality of the app that much. What would be interesting is to be able to figure out a way to make the request two-phased where you could request for one thing, send a response, and then &lt;em&gt;based on the user response&lt;/em&gt; send back another response. But I haven&amp;rsquo;t really looked much into that with the somewhat limited functionality of the Whatsapp API so far.&lt;/p&gt;
&lt;h4 id=&#34;deployment&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;I have this deployed on Heroku on a dyno that goes to sleep when not in use so the first request might take some time if it&amp;rsquo;s not been done in a while. The Procfile for Heroku deployment is using a gunicorn server instead of the Flask development server. The guide to setup a heroku deployment is &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-python?singlepage=true&#34;&gt;here&lt;/a&gt;. The app is deployed/updated with a simple &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;web: gunicorn bot:app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to play around with send-pups, follow the four-step method to happiness:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add +14155238886 to whatsapp contacts. This is the Twilio Sandbox number I received.&lt;/li&gt;
&lt;li&gt;Send &lt;code&gt;join instead-exclaimed&lt;/code&gt; through whatsapp to the above number to sign up to receive intellectual pups&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;send pups&lt;/code&gt; to start receiving intellectual pups&lt;/li&gt;
&lt;li&gt;Achieve happiness&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: The trial account has a limited free balance that you can use to send and receive messages as part of testing your app. I&amp;rsquo;ll keep this going only as long as that balance is available. For production use you need to get your business case approved through Twilio as the Whatsapp API is not open to all just yet.&lt;/p&gt;
&lt;p&gt;See it in action -&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
</description>
      
    </item>
    
    <item>
      <title>The Gap in Learning Code and Building With Code</title>
      <link>https://akzn.me/blog/the-gap-in-learning-code-and-building-with-code/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://akzn.me/blog/the-gap-in-learning-code-and-building-with-code/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;tl;dr: A post about what I feel is missing from &amp;ldquo;learn to code&amp;rdquo; servicesÂ - one reason why new coders get frustrated.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t have a traditional CS degree. Most people I hang out with at work wouldn&amp;rsquo;t know that right off the bat. If you&amp;rsquo;re a programmer, people assume that youÂ must have a CS degree. Though I did have programming classes in college, none of them were nearly as in-depth as one would expect to get out of a four year college education. (This was also the case for most classes, not just CS.) As a result, most of what I&amp;rsquo;ve learned about programming has been self-taught through building things andÂ taking help from peers and a lot of online resources. The software industry in general is one of the only industries today where everything you need to know to get a job can be found and learned online. It is one of the few fields where people are regularly contributing time and information to provide you the resources you need to get into it yourself. It is likely also - though I don&amp;rsquo;t have the data for this - the only field where industry certifications (not degrees) are not a requirement for most jobs.&lt;/p&gt;
&lt;p&gt;And because of all this today so many people are willing to try their hand at coding.Â Having come from the same background (self-taught) this group &amp;ndash; new coders &amp;ndash; is my favorite. The excitement of solving something challenging is never replicated the same way as it is in someone who only a few days ago was a totalÂ programmingÂ n00b. These people know they like it but they might come across a point where they simply give up. And if you&amp;rsquo;ve ever hung out around new coders you find so many of them inevitably getting disheartened at how it&amp;rsquo;s a seemingly uphill struggle and they&amp;rsquo;re not really sure what&amp;rsquo;s going on anymore or that they spent hours learning the basics of Java but now what? Maybe there&amp;rsquo;s not enough building. Maybe there&amp;rsquo;s information overload and suddenly they&amp;rsquo;re overwhelmed. This is interesting to me. Despite all the resources that we have readily available, I find it perplexing that this is a field where even people who know they want to continue with coding end upÂ getting disheartened so frequently.Â Having played around with a lot of &amp;ldquo;learn to code&amp;rdquo; services that offer tutorials or even, in some cases, a full-scaleÂ curriculum to become a programmer, I have some theories on this dissonance new coders encounter.&lt;/p&gt;
&lt;p&gt;I took three semesters of French in college. The first thing we did in our French class was just rote memorization - words for hello, welcome, good day, how are you, good bye, see you later, etc. We didn&amp;rsquo;t get to animals till like a month later. Didn&amp;rsquo;t get to everyday things like stationary till a month after that. Didn&amp;rsquo;t get to the rules of correct usage till three months in (note: our teacher was using the correct verbiage all along, but didn&amp;rsquo;t bog us down initially withÂ explanations for why it had to beÂ so.) As a result, it never felt like too much information and not once did it feel like what we were learning had no real immediate use. Imagine if one day we were being taught the words and then their multiple tenses and then how those tenses changed in a sentence structure, how those sentences could mean different things with just a few words changed, how this was all important before we even knew what the words really were. It would be so much useless information overload that someone new wouldn&amp;rsquo;t know what to do with it.&lt;/p&gt;
&lt;p&gt;When I was a kid one of the toys I used to occasionally play with was a &lt;a href=&#34;http://zephyrtoys.com/collections/mechanix&#34;&gt;Mechanix set&lt;/a&gt;. It&amp;rsquo;s as close as you can get to teaching a little kid simple engineering skills. It is one of my favorite toys. When you open a Mechanix set manual, it&amp;rsquo;ll tell you what you need to do to build that particular set. Imagine insteadÂ giving a kid a Mechanix set and it has three different sized screws and instead of labeling them A, B, C in the manual, it has their exact sizes as referred to in the professional world. Then it goes on to explain why these screws are different sized and what that means, what the different steel plates are actually called, the correct way to hold a screwdriver, the right way to screw something. All of these details, though important in the real world, are useless to a kid who doesn&amp;rsquo;t have much knowledge about it initially. All they want to do is build something to play with it, not to understand the physics behind it. And yet this is what happens in most &amp;rsquo;learn to program&amp;rsquo; services.&lt;/p&gt;
&lt;p&gt;When we learn a language we memorize things and only later learn how everything fits. This is very relevant. This is, in fact, how people should learn programming. Instead what ends up happening in programming tutorials is that people just keep learning the sizes of screws, the right way to hold a screwdriver, the multiple tenses and forms of different words - without ever actually being able to apply that knowledge to anythingÂ directlyÂ relevant to them. I think this is where the real dissonance occurs. When someone realizes that the tutorial they were followingÂ just spent a whole weekend teaching them theÂ Javascript language so now they can write a Fibonacci series in the console, no questions asked, but they aren&amp;rsquo;t sure how this helps them build a website, it&amp;rsquo;s not likely that they&amp;rsquo;re going to go around looking for a new tutorial with enthusiasm. It&amp;rsquo;s more likely they&amp;rsquo;ll get bogged down and eventually maybe revisit it again at a later stage (if at all). Not saying all of this isn&amp;rsquo;t important, it is, but this is likely not why the person was interested in programming in the first place. They probably just wanted to see what they could build with it.&lt;/p&gt;
&lt;p&gt;So it seems to meÂ that the problem with a lot of these tutorials is that they teach the rules of the language before telling people what the words are, what they can do, and how they can be used right &lt;em&gt;now&lt;/em&gt;. This is all more important to a beginner than the in-depth stuff. When we learned the French words for hello, good morning, how are you, and good bye we were able to use them immediately. We walked in the next day and everyone said Bonjour instead of Hello. If we&amp;rsquo;d learned the words for cat and dog in the first class, we would have remembered them, sure, but we wouldn&amp;rsquo;t know what to do with that knowledge. You just need more context to use cat/dog in a sentence. And so, on the first day, it just wasn&amp;rsquo;t directly relevant. Hello was relevant. It could be used immediately. It didn&amp;rsquo;tÂ require knowing anything else.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;quot;&amp;quot; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;500&amp;rdquo;]&lt;img src=&#34;images/171.jpg&#34; alt=&#34;&#34;&gt; Every new programmer goes through this phase.[/caption]&lt;/p&gt;
&lt;p&gt;Â &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve spent a lot of time looking for something like this and I think &lt;a href=&#34;http://freecodecamp.com/&#34;&gt;Freecodecamp&lt;/a&gt; and &lt;a href=&#34;https://teamtreehouse.com&#34;&gt;Team Treehouse&lt;/a&gt; are the two that tend to come close to what I&amp;rsquo;m trying to articulate. I&amp;rsquo;m not a very good video learner (I like readingÂ more) but every now and then I&amp;rsquo;ve used Treehouse to recall something I&amp;rsquo;d learned earlier. And it helps that a lot of their stuff is very industry relevant (dev tools, etc.) Similarly, Freecodecamp is something that provides just enough knowledge to help you build a project. Their strongest aspect is the near 24/7 online community that is there to help anyone stuck. In both cases, at the end of the day,Â you&amp;rsquo;re learning to build things before you know how to build things.&lt;/p&gt;
&lt;p&gt;When you want to paint a room, you learn just enough about painting to get the job done. What kind of brush you need, what kind of paint, how to move the brush. You don&amp;rsquo;t sit through a class of aesthetics and color theory simply to paint a room. This practice of knowing &lt;em&gt;just enough&lt;/em&gt; is what I think can bridge the gap between learning and building, and maybe, just maybe, remove that early dissonance new coders face. If a serviceÂ is able to master the right balance between imparting knowledge and providing rote instructions to build something interesting, they&amp;rsquo;ll be able to provide real value in this field.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
</description>
      
    </item>
    
  </channel>
</rss>